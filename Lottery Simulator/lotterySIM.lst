Microsoft (R) Macro Assembler Version 14.36.32537.0	    04/05/24 15:02:19
#Lottery, Version 3 (lotterySIM.asm			     Page 1 - 1


				TITLE Lottery, Version 3 (lotterySIM.asm)
				;This procedure will mimic a lottery draw by creating a structure with two instances. One will accept
				;randomized, computer generated numbers utilizing the EAX register and procedures Randomize and RandomRange
				;from Irvine. This program will use registers esi and edi to point to locations in memory such as Ldraw and
				;and Uticket. Uticket will be moved into EAX, compared to locations in memory, and the results will either inc
				;EBX or make no changes to signal a match is found or not. EBX will then be moved into EAX, output, and then used
				;to determine what strings should be output. Register ECX will be used to establish loop for checking white balls
				;and then will be used to determine if the red ball is found by comparing EDX and EBX. If ball is found ECX will
				;have a value of 1, if not it will have a value of 0. One Macro will be used in this procedure.

				; Name: Lewis Green
				; CPEN 3710
				; Date: 4/5/24

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000018			lotteryBalls STRUCT		;This structure stores variables for the lottery draw which will
 00000000  00000000			whiteB1 dword ?		;be randomized. The randomized values will be compared to the 
 00000004  00000000			whiteB2 dword ?		;inputted user values to see if the user wins a prize or not
 00000008  00000000			whiteB3 dword ?
 0000000C  00000000			whiteB4 dword ?
 00000010  00000000			whiteB5 dword ?
 00000014  00000000			redBall dword ?
				lotteryBalls Ends

 00000000			.data
 00000000 00000000		Ldraw lotteryBalls <>		;This initializes an instance of the structures to be used
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000018 00000000		Uticket lotteryBalls <>		;this initializes another instance of the structure to be used
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000030 45 6E 74 65 72	prompt byte "Enter 6 integers. First five ranging from 1 to 69, and last ranging from 1 to 26: ",0
	   20 36 20 69 6E
	   74 65 67 65 72
	   73 2E 20 46 69
	   72 73 74 20 66
	   69 76 65 20 72
	   61 6E 67 69 6E
	   67 20 66 72 6F
	   6D 20 31 20 74
	   6F 20 36 39 2C
	   20 61 6E 64 20
	   6C 61 73 74 20
	   72 61 6E 67 69
	   6E 67 20 66 72
	   6F 6D 20 31 20
	   74 6F 20 32 36
	   3A 20 00
 00000083 45 6E 74 65 72	first byte "Enter your first white ball number: ",0
	   20 79 6F 75 72
	   20 66 69 72 73
	   74 20 77 68 69
	   74 65 20 62 61
	   6C 6C 20 6E 75
	   6D 62 65 72 3A
	   20 00
 000000A8 45 6E 74 65 72	second byte "Enter second white ball number:  ",0
	   20 73 65 63 6F
	   6E 64 20 77 68
	   69 74 65 20 62
	   61 6C 6C 20 6E
	   75 6D 62 65 72
	   3A 20 20 00
 000000CA 45 6E 74 65 72	third byte "Enter third white ball number: ",0
	   20 74 68 69 72
	   64 20 77 68 69
	   74 65 20 62 61
	   6C 6C 20 6E 75
	   6D 62 65 72 3A
	   20 00
 000000EA 45 6E 74 65 72	fourth byte "Enter fourth white ball number: ",0
	   20 66 6F 75 72
	   74 68 20 77 68
	   69 74 65 20 62
	   61 6C 6C 20 6E
	   75 6D 62 65 72
	   3A 20 00
 0000010B 45 6E 74 65 72	fifth byte "Enter fifth white ball number: ",0
	   20 66 69 66 74
	   68 20 77 68 69
	   74 65 20 62 61
	   6C 6C 20 6E 75
	   6D 62 65 72 3A
	   20 00
 0000012B 50 6C 65 61 73	sixth byte "Please enter your final integer - your red ball number: ",0
	   65 20 65 6E 74
	   65 72 20 79 6F
	   75 72 20 66 69
	   6E 61 6C 20 69
	   6E 74 65 67 65
	   72 20 2D 20 79
	   6F 75 72 20 72
	   65 64 20 62 61
	   6C 6C 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000164 49 6E 76 61 6C	invalidPrompt byte "Invalid integer, input again. ",0
	   69 64 20 69 6E
	   74 65 67 65 72
	   2C 20 69 6E 70
	   75 74 20 61 67
	   61 69 6E 2E 20
	   00
 00000183 54 68 65 20 6C	wNum byte "The lottery number drawn: ",0
	   6F 74 74 65 72
	   79 20 6E 75 6D
	   62 65 72 20 64
	   72 61 77 6E 3A
	   20 00
 0000019E 45 6E 74 65 72	leavePrompt byte "Enter 0 to restart or press enter. Enter any other integer to exit.",0
	   20 30 20 74 6F
	   20 72 65 73 74
	   61 72 74 20 6F
	   72 20 70 72 65
	   73 73 20 65 6E
	   74 65 72 2E 20
	   45 6E 74 65 72
	   20 61 6E 79 20
	   6F 74 68 65 72
	   20 69 6E 74 65
	   67 65 72 20 74
	   6F 20 65 78 69
	   74 2E 00

				;This will be the results if matches or no matches found							
 000001E2 20 57 68 69 74	totalWbMatch byte " White Ball matches found ",0
	   65 20 42 61 6C
	   6C 20 6D 61 74
	   63 68 65 73 20
	   66 6F 75 6E 64
	   20 00
 000001FD 61 6C 6F 6E 67	yesRed byte "along with a red ball: ",0
	   20 77 69 74 68
	   20 61 20 72 65
	   64 20 62 61 6C
	   6C 3A 20 00
 00000215 77 69 74 68 6F	noRed byte "without a red ball: ",0
	   75 74 20 61 20
	   72 65 64 20 62
	   61 6C 6C 3A 20
	   00

				;This will be the results WITHOUT a red ball in the match
 0000022A 4E 6F 20 6D 61	zero_wbnoRed byte "No matches, better luck next time.",0
	   74 63 68 65 73
	   2C 20 62 65 74
	   74 65 72 20 6C
	   75 63 6B 20 6E
	   65 78 74 20 74
	   69 6D 65 2E 00
 0000024D 20 59 6F 75 72	one_wbnoRed byte " Your ticket wins nothing, better luck next time.",0
	   20 74 69 63 6B
	   65 74 20 77 69
	   6E 73 20 6E 6F
	   74 68 69 6E 67
	   2C 20 62 65 74
	   74 65 72 20 6C
	   75 63 6B 20 6E
	   65 78 74 20 74
	   69 6D 65 2E 00
 0000027F 59 6F 75 72 20	two_wbnoRed byte "Your ticket wins nothing, better luck next time.",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 6E 6F 74
	   68 69 6E 67 2C
	   20 62 65 74 74
	   65 72 20 6C 75
	   63 6B 20 6E 65
	   78 74 20 74 69
	   6D 65 2E 00
 000002B0 59 6F 75 72 20	three_wbnoRed byte "Your ticket wins $7!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 37 21
	   00
 000002C5 59 6F 75 72 20	four_wbnoRed byte "Your ticket wins $100!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 31 30
	   30 21 00
 000002DC 59 6F 75 72 20	five_wbnoRed byte "Your ticket wins $1,000,000!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 31 2C
	   30 30 30 2C 30
	   30 30 21 00

				;This will be  the results WITH a red ball in the match
 000002F9 59 6F 75 72 20	one_rednoWhite byte "Your ticket wins $4!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 34 21
	   00
 0000030E 59 6F 75 72 20	one_red1White byte "Your ticket wins $4!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 34 21
	   00
 00000323 59 6F 75 72 20	one_red2White byte "Your ticket wins $7!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 37 21
	   00
 00000338 59 6F 75 72 20	one_red3White byte "Your ticket wins $100!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 31 30
	   30 21 00
 0000034F 59 6F 75 72 20	one_red4White byte "Your ticket wins $50,000!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 24 35 30
	   2C 30 30 30 21
	   00
 00000369 59 6F 75 72 20	one_red5White byte "Your ticket wins the Grand Prize!",0
	   74 69 63 6B 65
	   74 20 77 69 6E
	   73 20 74 68 65
	   20 47 72 61 6E
	   64 20 50 72 69
	   7A 65 21 00

				RandomizerWB MACRO	;creating macro to produce random integers in range
				mov eax, 69			;sets randomizes range to 0 to 69 - 1 (0-68)
				push eax			;saving range of values
				call RandomRange	;randomizes 
				inc eax				;adds 1 to eax incase of 0 and to make sure it can reach 69.
				endm

				notValid MACRO
				mov edx, offset invalidPrompt
				call WriteString
				endm

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E	call Randomize	;generates unique seeds
 00000005			Beginning:
				;first white ball randomize
				RandomizerWB	;using macro
 00000005  B8 00000045	     1	mov eax, 69			;sets randomizes range to 0 to 69 - 1 (0-68)
 0000000A  50		     1	push eax			;saving range of values
 0000000B  E8 00000000 E     1	call RandomRange	;randomizes 
 00000010  40		     1	inc eax				;adds 1 to eax incase of 0 and to make sure it can reach 69.
 00000011  A3 00000000 R	mov Ldraw.whiteB1, eax		;moving random value from eax into white ball 1
 00000016  BA 00000183 R	mov edx, offset wNum	;points to wNum
 0000001B  E8 00000000 E	call WriteString		;writes wNum string
 00000020  E8 00000000 E	call WriteDec			;calls to write randomized value
 00000025  58			pop eax			;restoring range of values
 00000026  E8 00000000 E	call crlf

				;second white ball randomize
 0000002B			retry1:
				RandomizerWB
 0000002B  B8 00000045	     1	mov eax, 69			;sets randomizes range to 0 to 69 - 1 (0-68)
 00000030  50		     1	push eax			;saving range of values
 00000031  E8 00000000 E     1	call RandomRange	;randomizes 
 00000036  40		     1	inc eax				;adds 1 to eax incase of 0 and to make sure it can reach 69.
 00000037  A3 00000004 R	mov Ldraw.whiteB2, eax
 0000003C  3B 05 00000000 R	cmp eax, Ldraw.whiteB1
 00000042  74 E7		jz retry1
 00000044  BA 00000183 R	mov edx, offset wNum	;points to wNum
 00000049  E8 00000000 E	call WriteString		;writes wNum string
 0000004E  E8 00000000 E	call WriteDec			;calls to write randomized value
 00000053  58			pop eax			;restoring range of values
 00000054  E8 00000000 E	call crlf		

				;third white ball randomize
 00000059			retry2:
				RandomizerWB
 00000059  B8 00000045	     1	mov eax, 69			;sets randomizes range to 0 to 69 - 1 (0-68)
 0000005E  50		     1	push eax			;saving range of values
 0000005F  E8 00000000 E     1	call RandomRange	;randomizes 
 00000064  40		     1	inc eax				;adds 1 to eax incase of 0 and to make sure it can reach 69.
 00000065  A3 00000008 R	mov Ldraw.whiteB3, eax
 0000006A  3B 05 00000000 R	cmp eax, Ldraw.whiteB1
 00000070  74 E7		jz retry2
 00000072  3B 05 00000004 R	cmp eax, Ldraw.whiteB2
 00000078  74 DF		jz retry2
 0000007A  BA 00000183 R	mov edx, offset wNum	;points to wNum
 0000007F  E8 00000000 E	call WriteString		;writes wNum string
 00000084  E8 00000000 E	call WriteDec			;calls to write randomized value
 00000089  58			pop eax			;restoring range of values
 0000008A  E8 00000000 E	call crlf

				;fourth white ball randomize
 0000008F			retry3:
				RandomizerWB
 0000008F  B8 00000045	     1	mov eax, 69			;sets randomizes range to 0 to 69 - 1 (0-68)
 00000094  50		     1	push eax			;saving range of values
 00000095  E8 00000000 E     1	call RandomRange	;randomizes 
 0000009A  40		     1	inc eax				;adds 1 to eax incase of 0 and to make sure it can reach 69.
 0000009B  A3 0000000C R	mov Ldraw.whiteB4, eax
 000000A0  3B 05 00000000 R	cmp eax, Ldraw.whiteB1
 000000A6  74 E7		jz retry3
 000000A8  3B 05 00000004 R	cmp eax, Ldraw.whiteB2
 000000AE  74 DF		jz retry3
 000000B0  3B 05 00000008 R	cmp eax, Ldraw.whiteB3
 000000B6  74 D7		jz retry3
 000000B8  BA 00000183 R	mov edx, offset wNum	;points to wNum
 000000BD  E8 00000000 E	call WriteString		;writes wNum string
 000000C2  E8 00000000 E	call WriteDec			;calls to write randomized value
 000000C7  58			pop eax			;restoring range of values
 000000C8  E8 00000000 E	call crlf

				;fift white ball randomize
 000000CD			retry4:
				RandomizerWB
 000000CD  B8 00000045	     1	mov eax, 69			;sets randomizes range to 0 to 69 - 1 (0-68)
 000000D2  50		     1	push eax			;saving range of values
 000000D3  E8 00000000 E     1	call RandomRange	;randomizes 
 000000D8  40		     1	inc eax				;adds 1 to eax incase of 0 and to make sure it can reach 69.
 000000D9  A3 00000010 R	mov Ldraw.whiteB5, eax
 000000DE  3B 05 00000000 R	cmp eax, Ldraw.whiteB1
 000000E4  74 E7		jz retry4
 000000E6  3B 05 00000004 R	cmp eax, Ldraw.whiteB2
 000000EC  74 DF		jz retry4
 000000EE  3B 05 00000008 R	cmp eax, Ldraw.whiteB3
 000000F4  74 D7		jz retry4
 000000F6  3B 05 0000000C R	cmp eax, Ldraw.whiteB4
 000000FC  74 CF		jz retry4
 000000FE  BA 00000183 R	mov edx, offset wNum	;points to wNum
 00000103  E8 00000000 E	call WriteString		;writes wNum string
 00000108  E8 00000000 E	call WriteDec			;calls to write randomized value
 0000010D  58			pop eax			;restoring range of values
 0000010E  E8 00000000 E	call crlf

 00000113			retry5:
 00000113  B8 0000001A		mov eax, 26 ;establishes range for 26 - 1 (0 to 25)
 00000118  E8 00000000 E	call RandomRange ;randomizes from 0 to 25
 0000011D  40			inc eax	;changes range to 1 to 26.
 0000011E  A3 00000014 R	mov Ldraw.redBall, eax
 00000123  BA 00000183 R	mov edx, offset wNum	;points to wNum
 00000128  E8 00000000 E	call WriteString		;writes wNum string
 0000012D  E8 00000000 E	call WriteDec			;calls to write randomized value
 00000132  E8 00000000 E	call crlf

				;start for user input	
 00000137  BA 00000030 R	mov edx, offset prompt		;prompt to alert user of steps
 0000013C  E8 00000000 E	call WriteString
 00000141  E8 00000000 E	call crlf

				;First user input
 00000146			input1:
 00000146  BA 00000083 R	mov edx, offset first		;prompt for the first value
 0000014B  E8 00000000 E	call WriteString
 00000150  E8 00000000 E	call ReadInt		;This section will ask for user input and move them
 00000155  83 F8 00		cmp eax, 0			;using ReadInt, stores input in eax
 00000158  74 0E		jz badInput1		;compares to 0 and 69, if outside of range
 0000015A  72 0C		jb badInput1		;it is invalid and user needs to input another
 0000015C  83 F8 45		cmp eax, 69			;integer.
 0000015F  77 07		ja badInput1	
 00000161  A3 00000018 R	mov Uticket.whiteB1,eax
 00000166  EB 0C		jmp input2

 00000168			badInput1:
				notValid	;using macro to writestring
 00000168  BA 00000164 R     1	mov edx, offset invalidPrompt
 0000016D  E8 00000000 E     1	call WriteString
 00000172  EB D2		jmp input1

				;Second user input
 00000174			input2:
 00000174  BA 000000A8 R	mov edx, offset second
 00000179  E8 00000000 E	call WriteString
 0000017E  E8 00000000 E	Call ReadInt
 00000183  83 F8 00		cmp eax, 0			;using ReadInt, stores input in eax
 00000186  74 16		jz badInput2		;compares to 0 and 69, if outside of range
 00000188  72 14		jb badInput2		;it is invalid and user needs to input another
 0000018A  83 F8 45		cmp eax, 69			;integer.
 0000018D  77 0F		ja badInput2
 0000018F  3B 05 00000018 R	cmp eax, Uticket.whiteB1	;compares to see if value exists already
 00000195  74 07		jz badInput2				;if exists, jump to badinput to reiterate input
 00000197  A3 0000001C R	mov Uticket.whiteB2,eax
 0000019C  EB 0C		jmp input3

 0000019E			badInput2:
				notValid
 0000019E  BA 00000164 R     1	mov edx, offset invalidPrompt
 000001A3  E8 00000000 E     1	call WriteString
 000001A8  EB CA		jmp input2

				;third input
 000001AA			input3:
 000001AA  BA 000000CA R	mov edx, offset third
 000001AF  E8 00000000 E	call WriteString
 000001B4  E8 00000000 E	Call ReadInt
 000001B9  83 F8 00		cmp eax, 0			;using ReadInt, stores input in eax
 000001BC  74 1E		jz badInput3		;compares to 0 and 69, if outside of range
 000001BE  72 1C		jb badInput3		;it is invalid and user needs to input another
 000001C0  83 F8 45		cmp eax, 69			;integer.
 000001C3  77 17		ja badInput3
 000001C5  3B 05 00000018 R	cmp eax, Uticket.whiteB1	;compares to see if value exists already
 000001CB  74 0F		jz badInput3				;if exists, jump to badinput to reiterate input
 000001CD  3B 05 0000001C R	cmp eax, Uticket.whiteB2
 000001D3  74 07		jz	badInput3
 000001D5  A3 00000020 R	mov Uticket.whiteB3,eax
 000001DA  EB 0C		jmp input4

 000001DC			badInput3:
				notValid
 000001DC  BA 00000164 R     1	mov edx, offset invalidPrompt
 000001E1  E8 00000000 E     1	call WriteString
 000001E6  EB C2		jmp input3

				;fourth input
 000001E8			input4:
 000001E8  BA 000000EA R	mov edx, offset fourth
 000001ED  E8 00000000 E	call WriteString
 000001F2  E8 00000000 E	Call ReadInt
 000001F7  83 F8 00		cmp eax, 0			;using ReadInt, stores input in eax
 000001FA  74 26		jz badInput4		;compares to 0 and 69, if outside of range
 000001FC  72 24		jb badInput4		;it is invalid and user needs to input another
 000001FE  83 F8 45		cmp eax, 69			;integer.
 00000201  77 1F		ja badInput4
 00000203  3B 05 00000018 R	cmp eax, Uticket.whiteB1	;compares to see if value exists already
 00000209  74 17		jz badInput4				;if exists, jump to badinput to reiterate input
 0000020B  3B 05 0000001C R	cmp eax, Uticket.whiteB2
 00000211  74 0F		jz badInput4
 00000213  3B 05 00000020 R	cmp eax, Uticket.whiteB3
 00000219  74 07		jz badInput4
 0000021B  A3 00000024 R	mov Uticket.whiteB4,eax
 00000220  EB 0C		jmp input5

 00000222			badInput4:
				notValid
 00000222  BA 00000164 R     1	mov edx, offset invalidPrompt
 00000227  E8 00000000 E     1	call WriteString
 0000022C  EB BA		jmp input4

				;fifth input
 0000022E			input5:
 0000022E  BA 0000010B R	mov edx, offset fifth
 00000233  E8 00000000 E	call WriteString
 00000238  E8 00000000 E	Call ReadInt
 0000023D  83 F8 00		cmp eax, 0			;using ReadInt, stores input in eax
 00000240  74 2E		jz badInput5		;compares to 0 and 69, if outside of range
 00000242  72 2C		jb badInput5		;it is invalid and user needs to input another
 00000244  83 F8 45		cmp eax, 69			;integer.
 00000247  77 27		ja badInput5
 00000249  3B 05 00000018 R	cmp eax, Uticket.whiteB1	;compares to see if value exists already
 0000024F  74 1F		jz badInput5				;if exists, jump to badinput to reiterate input
 00000251  3B 05 0000001C R	cmp eax, Uticket.whiteB2
 00000257  74 17		jz badInput5
 00000259  3B 05 00000020 R	cmp eax, Uticket.whiteB3
 0000025F  74 0F		jz badInput5
 00000261  3B 05 00000024 R	cmp eax, Uticket.whiteB4
 00000267  74 07		jz badInput5
 00000269  A3 00000028 R	mov Uticket.whiteB5,eax
 0000026E  EB 0C		jmp input6

 00000270			badInput5:
				notValid
 00000270  BA 00000164 R     1	mov edx, offset invalidPrompt
 00000275  E8 00000000 E     1	call WriteString
 0000027A  EB B2		jmp input5

				;sixth input
 0000027C			input6:
 0000027C  BA 0000012B R	mov edx, offset sixth
 00000281  E8 00000000 E	call WriteString
 00000286  E8 00000000 E	Call ReadInt	
 0000028B  83 F8 00		cmp eax, 0			;using ReadInt, stores input in eax
 0000028E  74 0E		jz badInput6		;compares to 0 and 69, if outside of range
 00000290  72 0C		jb badInput6		;it is invalid and user needs to input another
 00000292  83 F8 1A		cmp eax, 26			;integer.
 00000295  77 07		ja badInput6	
 00000297  A3 0000002C R	mov Uticket.redBall,eax
 0000029C  EB 0C		jmp compare

 0000029E			badInput6:
				notValid
 0000029E  BA 00000164 R     1	mov edx, offset invalidPrompt
 000002A3  E8 00000000 E     1	call WriteString
 000002A8  EB D2		jmp input6

 000002AA			compare:
 000002AA  33 D2		xor edx, edx            ;zeros out register
 000002AC  33 DB		xor ebx, ebx
 000002AE  BE 00000018 R	mov esi, offset uticket ;points to Uticket
 000002B3  BF 00000000 R	mov edi, offset Ldraw   ;points to beginning of Ldraw
 000002B8  B9 00000005		mov ecx, 5              ;number of white balls in uticket for loop
 000002BD  8B 06		mov eax, [esi]          ;moving user input into eax
 000002BF			L1:						;loop for first user input
 000002BF  3B 07		cmp eax, [edi]          ;comparing input w/ random draw
 000002C1  74 07		je MatchFound           ;if match found, jump
 000002C3  83 C7 04		add edi, 4              ;if no match move to next value in Ldraw
 000002C6  E2 F7		Loop L1					;end of loop1
 000002C8  EB 01		jmp nComp

 000002CA			MatchFound:
 000002CA  43			inc ebx         ;if match found, increment counter


 000002CB			nComp:			;compares second value
 000002CB  B9 00000005		mov ecx, 5      ;number of white balls in uticket for loop
 000002D0  BF 00000000 R	mov edi, offset Ldraw   ;points to beginning of Ldraw
 000002D5  83 C6 04		add esi,4		;moving a dword over for white balls
 000002D8  8B 06		mov eax, [esi]  ;moving user input into eax
 000002DA			L2:
 000002DA  3B 07		cmp eax, [edi]      ;comparing input w/ random draw
 000002DC  74 07		je MatchFound2      ;if match found, jump
 000002DE  83 C7 04		add edi, 4          ;if no match move to next value in Ldraw
 000002E1  E2 F7		Loop L2
 000002E3  EB 01		jmp nComp1			;compares third value

 000002E5			MatchFound2:
 000002E5  43			inc ebx         ;if match found, increment counter

 000002E6			nComp1:			;compares third value
 000002E6  B9 00000005		mov ecx, 5      ;number of white balls in uticket for loop
 000002EB  BF 00000000 R	mov edi, offset Ldraw   ;points to beginning of Ldraw
 000002F0  83 C6 04		add esi,4		;moving a dword over for white balls
 000002F3  8B 06		mov eax, [esi]  ;moving user input into eax
 000002F5			L3:
 000002F5  3B 07		cmp eax, [edi]      ;comparing input w/ random draw
 000002F7  74 07		je MatchFound3      ;if match found, jump
 000002F9  83 C7 04		add edi, 4          ;if no match move to next value in Ldraw
 000002FC  E2 F7		Loop L3
 000002FE  EB 01		jmp ncomp2			;compares fourth value

 00000300			MatchFound3:
 00000300  43			inc ebx         ;if match found, increment counter

 00000301			ncomp2:			;compares fourth value
 00000301  B9 00000005		mov ecx, 5      ;number of white balls in uticket for loop
 00000306  BF 00000000 R	mov edi, offset Ldraw   ;points to beginning of Ldraw
 0000030B  83 C6 04		add esi,4		;moving a dword over for white balls
 0000030E  8B 06		mov eax, [esi]  ;moving user input into eax
 00000310			L4:
 00000310  3B 07		cmp eax, [edi]          ;comparing input w/ random draw
 00000312  74 07		je MatchFound4          ;if match found, jump
 00000314  83 C7 04		add edi, 4              ;if no match move to next value in Ldraw
 00000317  E2 F7		Loop L4
 00000319  EB 01		jmp ncompFinal			;compares fourth value

 0000031B			MatchFound4:
 0000031B  43			inc ebx			 ;if match found, increment counter

 0000031C			ncompFinal:			;compares final value
 0000031C  B9 00000005		mov ecx, 5			;number of white balls in uticket for loop
 00000321  BF 00000000 R	mov edi, offset Ldraw   ;points to beginning of Ldraw
 00000326  83 C6 04		add esi,4			;moving a dword over for white balls
 00000329  8B 06		mov eax, [esi]		;moving user input into eax
 0000032B			L5:
 0000032B  3B 07		cmp eax, [edi]          ;comparing input w/ random draw
 0000032D  74 07		je MatchFound5          ;if match found, jump
 0000032F  83 C7 04		add edi, 4              ;if no match move to next value in Ldraw
 00000332  E2 F7		Loop L5
 00000334  EB 01		jmp wbFound

 00000336			MatchFound5:
 00000336  43			inc ebx         ;if match found, increment counter

 00000337			wbFound:
 00000337  8B C3		mov eax, ebx		;moving white ball matches found in eax
 00000339  E8 00000000 E	call WriteDec		;writes amt of matches found
 0000033E  BA 000001E2 R	mov edx, offset totalWbMatch	;points to prompt to show matches
 00000343  E8 00000000 E	call WriteString

 00000348			rbCheck:
 00000348  33 C9		xor ecx, ecx		;zeros out ecx in case loop ended early
 0000034A  83 C6 04		add esi, 4			;move a dword to last position - red ball
 0000034D  8B 16		mov edx, [esi]		;move the users input red ball into edx
 0000034F  8B 1D 00000014 R	mov ebx, Ldraw.RedBall ;comparing red ball numbers for match
 00000355  3B D3		cmp edx, ebx	;cmp the random red ball to user red ball input
 00000357  75 0D		jne noMatches		;if red ball match not found, jmp to next section
 00000359  41			inc ecx				;add 1 to ecx if red ball found
 0000035A  BA 000001FD R	mov edx, offset yesRed
 0000035F  E8 00000000 E	call WriteString
 00000364  EB 0A		jmp noMatchesCont

 00000366			noMatches:
 00000366  BA 00000215 R	mov edx, offset noRed
 0000036B  E8 00000000 E	call WriteString
 00000370			noMatchesCont:
 00000370  83 F8 00		cmp eax, 0			;compares matches to 0
 00000373  75 23		jnz oneMatches		;if not zero, get checked elsewhere
 00000375  83 F9 01		cmp ecx, 1			;checks if red ball match is found
 00000378  74 0F		je gotRed			;if found, jump to found red ball part
 0000037A  BA 0000022A R	mov edx, offset zero_wbnoRed ;if not found, write prompt
 0000037F  E8 00000000 E	call WriteString
 00000384  E9 000000BA		jmp ending		;skip further sections if this meets conditions.
 00000389			gotRed:
 00000389  BA 000002F9 R	mov edx, offset one_rednoWhite	;if red found, output prompt
 0000038E  E8 00000000 E	call WriteString
 00000393  E9 000000AB		jmp ending


 00000398			oneMatches:
 00000398  83 F8 01		cmp eax, 1			;compares matches to 0
 0000039B  75 23		jnz twoMatches		;if not zero, get checked elsewhere
 0000039D  83 F9 01		cmp ecx, 1			;checks if red ball match is found
 000003A0  74 0F		je gotRed1			;if found, jump to found red ball part
 000003A2  BA 0000024D R	mov edx, offset one_wbnoRed ;if not found, write prompt
 000003A7  E8 00000000 E	call WriteString
 000003AC  E9 00000092		jmp ending		;skip further sections if this meets conditions.
 000003B1			gotRed1:
 000003B1  BA 0000030E R	mov edx, offset one_red1White	;if red found, output prompt
 000003B6  E8 00000000 E	call WriteString
 000003BB  E9 00000083		jmp ending

 000003C0			twoMatches:
 000003C0  83 F8 02		cmp eax, 2			;compares matches to 0
 000003C3  75 1D		jnz threeMatches		;if not zero, get checked elsewhere
 000003C5  83 F9 01		cmp ecx, 1			;checks if red ball match is found
 000003C8  74 0C		je gotRed2			;if found, jump to found red ball part
 000003CA  BA 0000027F R	mov edx, offset two_wbnoRed ;if not found, write prompt
 000003CF  E8 00000000 E	call WriteString
 000003D4  EB 6D		jmp ending		;skip further sections if this meets conditions.
 000003D6			gotRed2:
 000003D6  BA 00000323 R	mov edx, offset one_red2White	;if red found, output prompt
 000003DB  E8 00000000 E	call WriteString
 000003E0  EB 61		jmp ending

 000003E2			threeMatches:
 000003E2  83 F8 03		cmp eax, 3			;compares matches to 0
 000003E5  75 1D		jnz fourMatches		;if not zero, get checked elsewhere
 000003E7  83 F9 01		cmp ecx, 1			;checks if red ball match is found
 000003EA  74 0C		je gotRed3			;if found, jump to found red ball part
 000003EC  BA 000002B0 R	mov edx, offset three_wbnoRed ;if not found, write prompt
 000003F1  E8 00000000 E	call WriteString
 000003F6  EB 4B		jmp ending		;skip further sections if this meets conditions.
 000003F8			gotRed3:
 000003F8  BA 00000338 R	mov edx, offset one_red3White	;if red found, output prompt
 000003FD  E8 00000000 E	call WriteString
 00000402  EB 3F		jmp ending

 00000404			fourMatches:
 00000404  83 F8 04		cmp eax, 4			;compares matches to 0
 00000407  75 1D		jnz FiveMatches		;if not zero, get checked elsewhere
 00000409  83 F9 01		cmp ecx, 1			;checks if red ball match is found
 0000040C  74 0C		je gotRed4			;if found, jump to found red ball part
 0000040E  BA 000002C5 R	mov edx, offset four_wbnoRed ;if not found, write prompt
 00000413  E8 00000000 E	call WriteString
 00000418  EB 29		jmp ending		;skip further sections if this meets conditions.
 0000041A			gotRed4:
 0000041A  BA 0000034F R	mov edx, offset one_red4White	;if red found, output prompt
 0000041F  E8 00000000 E	call WriteString
 00000424  EB 1D		jmp ending

 00000426			fiveMatches:
 00000426  83 F9 01		cmp ecx, 1			;checks if red ball match is found
 00000429  74 0C		je gotRed5			;if found, jump to found red ball part
 0000042B  BA 000002DC R	mov edx, offset five_wbnoRed ;if not found, write prompt
 00000430  E8 00000000 E	call WriteString
 00000435  EB 0C		jmp ending		;skip further sections if this meets conditions.
 00000437			gotRed5:
 00000437  BA 00000369 R	mov edx, offset one_red5White	;if red found, output prompt
 0000043C  E8 00000000 E	call WriteString
 00000441  EB 00		jmp ending

 00000443			ending:
 00000443  E8 00000000 E	call crlf
 00000448  BA 0000019E R	mov edx, offset leavePrompt
 0000044D  E8 00000000 E	call WriteString
 00000452  E8 00000000 E	call ReadInt
 00000457  83 F8 00		cmp eax, 0
 0000045A  0F 84 FFFFFBA5	jz Beginning

					exit
 00000460  6A 00	   *	    push   +000000000h
 00000462  E8 00000000 E   *	    call   ExitProcess
 00000467			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.36.32537.0	    04/05/24 15:02:19
#Lottery, Version 3 (lotterySIM.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

RandomizerWB . . . . . . . . . .	Proc
notValid . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
lotteryBalls . . . . . . . . . .	 00000018
  whiteB1  . . . . . . . . . . .	 00000000	 DWord
  whiteB2  . . . . . . . . . . .	 00000004	 DWord
  whiteB3  . . . . . . . . . . .	 00000008	 DWord
  whiteB4  . . . . . . . . . . .	 0000000C	 DWord
  whiteB5  . . . . . . . . . . .	 00000010	 DWord
  redBall  . . . . . . . . . . .	 00000014	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000038B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000467 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000467 Public STDCALL
  Beginning  . . . . . . . . . .	L Near	 00000005 _TEXT	
  retry1 . . . . . . . . . . . .	L Near	 0000002B _TEXT	
  retry2 . . . . . . . . . . . .	L Near	 00000059 _TEXT	
  retry3 . . . . . . . . . . . .	L Near	 0000008F _TEXT	
  retry4 . . . . . . . . . . . .	L Near	 000000CD _TEXT	
  retry5 . . . . . . . . . . . .	L Near	 00000113 _TEXT	
  input1 . . . . . . . . . . . .	L Near	 00000146 _TEXT	
  badInput1  . . . . . . . . . .	L Near	 00000168 _TEXT	
  input2 . . . . . . . . . . . .	L Near	 00000174 _TEXT	
  badInput2  . . . . . . . . . .	L Near	 0000019E _TEXT	
  input3 . . . . . . . . . . . .	L Near	 000001AA _TEXT	
  badInput3  . . . . . . . . . .	L Near	 000001DC _TEXT	
  input4 . . . . . . . . . . . .	L Near	 000001E8 _TEXT	
  badInput4  . . . . . . . . . .	L Near	 00000222 _TEXT	
  input5 . . . . . . . . . . . .	L Near	 0000022E _TEXT	
  badInput5  . . . . . . . . . .	L Near	 00000270 _TEXT	
  input6 . . . . . . . . . . . .	L Near	 0000027C _TEXT	
  badInput6  . . . . . . . . . .	L Near	 0000029E _TEXT	
  compare  . . . . . . . . . . .	L Near	 000002AA _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000002BF _TEXT	
  MatchFound . . . . . . . . . .	L Near	 000002CA _TEXT	
  nComp  . . . . . . . . . . . .	L Near	 000002CB _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000002DA _TEXT	
  MatchFound2  . . . . . . . . .	L Near	 000002E5 _TEXT	
  nComp1 . . . . . . . . . . . .	L Near	 000002E6 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000002F5 _TEXT	
  MatchFound3  . . . . . . . . .	L Near	 00000300 _TEXT	
  ncomp2 . . . . . . . . . . . .	L Near	 00000301 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000310 _TEXT	
  MatchFound4  . . . . . . . . .	L Near	 0000031B _TEXT	
  ncompFinal . . . . . . . . . .	L Near	 0000031C _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000032B _TEXT	
  MatchFound5  . . . . . . . . .	L Near	 00000336 _TEXT	
  wbFound  . . . . . . . . . . .	L Near	 00000337 _TEXT	
  rbCheck  . . . . . . . . . . .	L Near	 00000348 _TEXT	
  noMatches  . . . . . . . . . .	L Near	 00000366 _TEXT	
  noMatchesCont  . . . . . . . .	L Near	 00000370 _TEXT	
  gotRed . . . . . . . . . . . .	L Near	 00000389 _TEXT	
  oneMatches . . . . . . . . . .	L Near	 00000398 _TEXT	
  gotRed1  . . . . . . . . . . .	L Near	 000003B1 _TEXT	
  twoMatches . . . . . . . . . .	L Near	 000003C0 _TEXT	
  gotRed2  . . . . . . . . . . .	L Near	 000003D6 _TEXT	
  threeMatches . . . . . . . . .	L Near	 000003E2 _TEXT	
  gotRed3  . . . . . . . . . . .	L Near	 000003F8 _TEXT	
  fourMatches  . . . . . . . . .	L Near	 00000404 _TEXT	
  gotRed4  . . . . . . . . . . .	L Near	 0000041A _TEXT	
  fiveMatches  . . . . . . . . .	L Near	 00000426 _TEXT	
  gotRed5  . . . . . . . . . . .	L Near	 00000437 _TEXT	
  ending . . . . . . . . . . . .	L Near	 00000443 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Ldraw  . . . . . . . . . . . . .	lotteryBalls  00000000 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
Uticket  . . . . . . . . . . . .	lotteryBalls  00000018 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fifth  . . . . . . . . . . . . .	Byte	 0000010B _DATA	
first  . . . . . . . . . . . . .	Byte	 00000083 _DATA	
five_wbnoRed . . . . . . . . . .	Byte	 000002DC _DATA	
four_wbnoRed . . . . . . . . . .	Byte	 000002C5 _DATA	
fourth . . . . . . . . . . . . .	Byte	 000000EA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
invalidPrompt  . . . . . . . . .	Byte	 00000164 _DATA	
leavePrompt  . . . . . . . . . .	Byte	 0000019E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
noRed  . . . . . . . . . . . . .	Byte	 00000215 _DATA	
one_red1White  . . . . . . . . .	Byte	 0000030E _DATA	
one_red2White  . . . . . . . . .	Byte	 00000323 _DATA	
one_red3White  . . . . . . . . .	Byte	 00000338 _DATA	
one_red4White  . . . . . . . . .	Byte	 0000034F _DATA	
one_red5White  . . . . . . . . .	Byte	 00000369 _DATA	
one_rednoWhite . . . . . . . . .	Byte	 000002F9 _DATA	
one_wbnoRed  . . . . . . . . . .	Byte	 0000024D _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000030 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
second . . . . . . . . . . . . .	Byte	 000000A8 _DATA	
sixth  . . . . . . . . . . . . .	Byte	 0000012B _DATA	
third  . . . . . . . . . . . . .	Byte	 000000CA _DATA	
three_wbnoRed  . . . . . . . . .	Byte	 000002B0 _DATA	
totalWbMatch . . . . . . . . . .	Byte	 000001E2 _DATA	
two_wbnoRed  . . . . . . . . . .	Byte	 0000027F _DATA	
wNum . . . . . . . . . . . . . .	Byte	 00000183 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
yesRed . . . . . . . . . . . . .	Byte	 000001FD _DATA	
zero_wbnoRed . . . . . . . . . .	Byte	 0000022A _DATA	

	   0 Warnings
	   0 Errors
